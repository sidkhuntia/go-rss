// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds(id, createdAt, updatedAt, name, url, userId)
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    ) RETURNING id, createdat, updatedat, name, url, userid
`

type CreateFeedParams struct {
	ID        uuid.UUID
	Createdat time.Time
	Updatedat time.Time
	Name      string
	Url       string
	Userid    uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Createdat,
		arg.Updatedat,
		arg.Name,
		arg.Url,
		arg.Userid,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Name,
		&i.Url,
		&i.Userid,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, createdat, updatedat, name, url, userid FROM feeds WHERE userId = $1
`

func (q *Queries) GetFeeds(ctx context.Context, userid uuid.UUID) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Name,
			&i.Url,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
