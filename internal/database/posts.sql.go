// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO
    posts(
        id,
        createdAt,
        updatedAt,
        title,
        description,
        url,
        feedId,
        publishedAt
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8
    ) RETURNING id, createdat, updatedat, title, description, url, feedid, publishedat
`

type CreatePostParams struct {
	ID          uuid.UUID
	Createdat   time.Time
	Updatedat   time.Time
	Title       string
	Description sql.NullString
	Url         string
	Feedid      uuid.UUID
	Publishedat time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Createdat,
		arg.Updatedat,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.Feedid,
		arg.Publishedat,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.Feedid,
		&i.Publishedat,
	)
	return i, err
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT
    p.id, p.createdat, p.updatedat, p.title, p.description, p.url, p.feedid, p.publishedat
FROM
    posts p
WHERE
    p.feedId IN (
        SELECT
            f.feedId
        FROM
            feed_follows f
        WHERE
            f.userId = $1
    )
ORDER BY p.publishedAt DESC
LIMIT $2
`

type GetPostsForUserParams struct {
	Userid uuid.UUID
	Limit  int32
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.Userid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.Feedid,
			&i.Publishedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
